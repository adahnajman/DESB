@page "/"

@inject HttpClient httpClient
@inject NavigationManager _navigationManager
@using System.Net.Http;
@using System.Text;
@using System.Net;
@using System.Net.Http.Json
@using System.Text.Json

<h3>Login</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<div class="card">
    <div class="card-body">
        <form @onsubmit="LoginUser" method="post" formname="Login" class="p-3">
            <AntiforgeryToken />
            <div class="form-group row p-2">
                <label for="UserName" class="col-sm-2 col-form-label">User Name</label>
                <div class="col-sm-6">
                    <InputText id="UserName" @bind-Value="user.UserName" class="form-control" />
                </div>
            </div>
            <div class="form-group row p-2">
                <label for="Password" class="col-sm-2 col-form-label">Password</label>
                <div class="col-sm-6">
                    <input type="password" id="Password" @bind="user.Password" class="form-control" />
                </div>
            </div>

            <div class="form-group row p-2">
                <div class="col-sm-6 offset-sm-2 right-align">
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>
            </div>
        </form>
    </div>
</div>


@code {
    public UserVM user { get; set; } = new UserVM();
    private string errorMessage;
    Dictionary<string, List<string>> errorMessages = new Dictionary<string, List<string>>();

    private async Task LoginUser()
    {
        try
        {
            if(user.UserName != null && user.Password != null)
            {
                var response = await httpClient.PostAsJsonAsync("login/api/login", user);

                if (response.IsSuccessStatusCode)
                {
                    _navigationManager.NavigateTo("/CustomerList");
                }
                else
                {
                    if (response.StatusCode == HttpStatusCode.BadRequest)
                    {
                        var errorResponse = await response.Content.ReadAsStringAsync();
                        var errorObject = JsonSerializer.Deserialize<ErrorResponse>(errorResponse);
                        errorMessage = "Failed to . Please fix the following errors:";
                        errorMessages = errorObject.Errors.ToDictionary(e => e.Key, e => e.Value.Values);
                    }
                    else
                    {
                        errorMessage = "Invalid username or password";
                    }
                    // Login failed, display error message
                    errorMessage = "Invalid username or password";
                }
            }
            else
            {
                errorMessage = "username or password is empty";
            }

        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while logging in \n error message: "+ ex.ToString();
        }
    }

    public class UserVM
    {
        public string UserName { get; set; }
        public string userFullName { get; set; }
        public string Password { get; set; }
        public string Email { get; set; }
    }

    public class ErrorResponse
    {
        public Dictionary<string, ErrorDetails> Errors { get; set; }
    }

    public class ErrorDetails
    {
        public List<string> Values { get; set; }
    }

}
